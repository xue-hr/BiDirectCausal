use_r()
library(devtools)
use_r()
library(devtools)
use_r("BiDirCDcML")
if(NULL)
{
cat(1)
}
if(NA)
{
cat(1)
}
if(0)
{
cat(1)
}
if(10)
{
cat(1)
}
library(TwoSampleMR)
library(MRcML)
library(MRCD)
# BW 27680694: ieu-a-1083
# DBP 30224653: ieu-b-39
# SBP 30224653: ieu-b-38
# FG 20081858: ebi-a-GCST000568
# Smoke 30643251: ieu-b-25
# Alcohol 30643251: ieu-b-73
# CAD 29212778: ebi-a-GCST005195
# Stoke 29531354: ebi-a-GCST005838
# T2D 22885922: ieu-a-26
# Asthma 29273806: ebi-a-GCST006862
source("CDMethods_July24.R")
# BW 27680694: ieu-a-1083
# DBP 30224653: ieu-b-39
# SBP 30224653: ieu-b-38
# FG 20081858: ebi-a-GCST000568
# Smoke 30643251: ieu-b-25
# Alcohol 30643251: ieu-b-73
# CAD 29212778: ebi-a-GCST005195
# Stoke 29531354: ebi-a-GCST005838
# T2D 22885922: ieu-a-26
# Asthma 29273806: ebi-a-GCST006862
source("../Sept24_2021_RealData/CDMethods_July24.R")
# BW 27680694: ieu-a-1083
# DBP 30224653: ieu-b-39
# SBP 30224653: ieu-b-38
# FG 20081858: ebi-a-GCST000568
# Smoke 30643251: ieu-b-25
# Alcohol 30643251: ieu-b-73
# CAD 29212778: ebi-a-GCST005195
# Stoke 29531354: ebi-a-GCST005838
# T2D 22885922: ieu-a-26
# Asthma 29273806: ebi-a-GCST006862
source("../Sept24_2021_RealData/CDMethods_July24.R")
source("../Sept24_2021_RealData/BidirectionMR_Pert_July24.R")
source("../Sept24_2021_RealData/BidirectionMR_July24.R")
source("../Sept24_2021_RealData/allele.qc.R")
source("../Sept24_2021_RealData/CD_Ratio_Independent_New_July24.R")
TSMR.ID.Vec =
c("ebi-a-GCST002216","ebi-a-GCST002222","ebi-a-GCST002223",
"ieu-a-89","ieu-a-835","ieu-a-999","ieu-a-1083","ieu-b-39",
"ieu-b-38","ebi-a-GCST000568","ieu-b-25","ieu-b-73","ebi-a-GCST005195",
"ebi-a-GCST005838","ieu-a-26","ebi-a-GCST006862")
exp.index = 16
out.index = 13
exp_id = TSMR.ID.Vec[exp.index]
out_id = TSMR.ID.Vec[out.index]
# preprocess data ---------------------------------------------------------
set.seed(1)
exposure_dat <- extract_instruments(exp_id,clump = F)
outcome_dat <- extract_instruments(out_id,clump = F)
union.IV = union(exposure_dat$SNP,outcome_dat$SNP)
exposure_dat <- extract_outcome_data(union.IV, exp_id, proxies = 0)
exposure_dat = exposure_dat[which(!duplicated(exposure_dat$SNP)),]
exposure_dat = exposure_dat[order(exposure_dat$chr,exposure_dat$pos),]
outcome_dat <- extract_outcome_data(union.IV, out_id, proxies = 0)
outcome_dat = outcome_dat[which(!duplicated(outcome_dat$SNP)),]
outcome_dat = outcome_dat[order(outcome_dat$chr,outcome_dat$pos),]
common.IV = intersect(exposure_dat$SNP,outcome_dat$SNP)
exposure_dat_new =
exposure_dat[which(is.element(exposure_dat$SNP,common.IV)),]
outcome_dat_new =
outcome_dat[which(is.element(outcome_dat$SNP,common.IV)),]
exp.out.flip =
allele.qc(a1 = exposure_dat_new$effect_allele.outcome,
a2 = exposure_dat_new$other_allele.outcome,
ref1 = outcome_dat_new$effect_allele.outcome,
ref2 = outcome_dat_new$other_allele.outcome)
if(sum(exp.out.flip$flip)>0)
{
outcome_dat_new$beta.outcome[exp.out.flip$flip] =
-outcome_dat_new$beta.outcome[exp.out.flip$flip]
}
exposure_dat_new = exposure_dat_new[exp.out.flip$keep,]
outcome_dat_new = outcome_dat_new[exp.out.flip$keep,]
### do the clumping
pval.clump = -log10(exposure_dat_new$pval.outcome) - log10(outcome_dat_new$pval.outcome)
pval.clump = 10^(-pval.clump)
data.clump =
data.frame(rsid = exposure_dat_new$SNP,
pval = pval.clump)
clump.result =
ieugwasr::ld_clump(dat = data.clump)
exposure_dat_final =
exposure_dat_new[which(is.element(exposure_dat_new$SNP,clump.result$rsid)),]
outcome_data_final =
outcome_dat_new[which(is.element(outcome_dat_new$SNP,clump.result$rsid)),]
b_exp = exposure_dat_final$beta.outcome
se_exp = exposure_dat_final$se.outcome
n_exp = mean(exposure_dat_final$samplesize.outcome)
b_out = outcome_data_final$beta.outcome
se_out = outcome_data_final$se.outcome
n_out = mean(outcome_data_final$samplesize.outcome)
b_X = se_exp
b_Y = se_out
b_X = b_exp
b_Y = b_out
se_X = se_exp
se_Y = se_out
n_X = n_exp
n_Y = n_out
sig.cutoff = 5e-8
num_pert = 10
random_start = 0
random.seed = 0
pvalue.X = pnorm(-abs(b_X/se_X))*2
pvalue.Y = pnorm(-abs(b_Y/se_Y))*2
ind_X = which(pvalue.X<(5e-8))
ind_Y = which(pvalue.Y<(5e-8))
cor_X = b_X / sqrt(b_X^2 + (n_X-2)*se_X^2)
cor_Y = b_Y / sqrt(b_Y^2 + (n_Y-2)*se_Y^2)
se_corX = sqrt((1-cor_X^2)^2/n_X)
se_corY = sqrt((1-cor_Y^2)^2/n_Y)
if(random.seed)
{
set.seed(random.seed)
}
# Without Screening
CDcML_XtoY_NoS = mr_cML_DP(b_exp = cor_X[ind_X],
b_out = cor_Y[ind_X],
se_exp = se_corX[ind_X],
se_out = se_corY[ind_X],
n = min(n_X,n_Y),random_start = random_start,
random_start_pert = random_start,
num_pert = num_pert)
set.seed(1)
CDcML_YtoX_NoS = mr_cML_DP(b_exp = cor_Y[ind_Y],
b_out = cor_X[ind_Y],
se_exp = se_corY[ind_Y],
se_out = se_corX[ind_Y],
n = min(n_X,n_Y),random_start = random_start,
random_start_pert = random_start,
num_pert = num_pert)
ind_X
ind_Y
# With Screening
intersect.ind.X.Y = intersect(ind_X,ind_Y)
ind_X_new = setdiff(ind_X,
intersect.ind.X.Y[(abs(cor_X)[intersect.ind.X.Y])<
(abs(cor_Y)[intersect.ind.X.Y])])
ind_Y_new = setdiff(ind_Y,
intersect.ind.X.Y[(abs(cor_X)[intersect.ind.X.Y])>
(abs(cor_Y)[intersect.ind.X.Y])])
CDcML_XtoY_S = mr_cML_DP(b_exp = cor_X[ind_X_new],
b_out = cor_Y[ind_X_new],
se_exp = se_corX[ind_X_new],
se_out = se_corY[ind_X_new],
n = min(n_X,n_Y),random_start = random_start,
random_start_pert = random_start,
num_pert = num_pert)
CDcML_YtoX_S = mr_cML_DP(b_exp = cor_Y[ind_Y_new],
b_out = cor_X[ind_Y_new],
se_exp = se_corY[ind_Y_new],
se_out = se_corX[ind_Y_new],
n = min(n_X,n_Y),random_start = random_start,
random_start_pert = random_start,
num_pert = num_pert)
use_r("BiDirMRcML")
library(devtools)
use_r("BiDirMRcML")
use_r("BiDirCDMethods")
use_r("BiDirCDMethod")
pvalue.X = pnorm(-abs(b_X/se_X))*2
pvalue.Y = pnorm(-abs(b_Y/se_Y))*2
ind_X = which(pvalue.X<(sig.cutoff))
ind_Y = which(pvalue.Y<(sig.cutoff))
cor_X = b_X / sqrt(b_X^2 + (n_X-2)*se_X^2)
cor_Y = b_Y / sqrt(b_Y^2 + (n_Y-2)*se_Y^2)
se_corX = sqrt((1-cor_X^2)^2/n_X)
se_corY = sqrt((1-cor_Y^2)^2/n_Y)
if(random.seed)
{
set.seed(random.seed)
}
# Without Screening
CD_XtoY_NoS = CDMethods(b_exp = b_X[ind_X],
b_out = b_Y[ind_X],
se_exp = se_X[ind_X],
se_out = se_Y[ind_X],
n_exp = n_X,n_out = n_Y)
CD_XtoY_NoS
ind_X
# Without Screening
CD_XtoY_NoS = CDMethods(b_exp = b_X[ind_X],
b_out = b_Y[ind_X],
se_exp = se_X[ind_X],
se_out = se_Y[ind_X],
n_exp = n_X,n_out = n_Y)
CD_YtoX_NoS = CDMethods(b_exp = b_Y[ind_Y],
b_out = b_X[ind_Y],
se_exp = se_Y[ind_Y],
se_out = se_X[ind_Y],
n_exp = n_Y,n_out = n_X)
# With Screening
intersect.ind.X.Y = intersect(ind_X,ind_Y)
ind_X_new = setdiff(ind_X,
intersect.ind.X.Y[(abs(cor_X)[intersect.ind.X.Y])<
(abs(cor_Y)[intersect.ind.X.Y])])
ind_Y_new = setdiff(ind_Y,
intersect.ind.X.Y[(abs(cor_X)[intersect.ind.X.Y])>
(abs(cor_Y)[intersect.ind.X.Y])])
CD_XtoY_S = CDMethods(b_exp = b_X[ind_X_new],
b_out = b_Y[ind_X_new],
se_exp = se_X[ind_X_new],
se_out = se_Y[ind_X_new],
n_exp = n_X,n_out = n_Y)
CD_YtoX_S = CDMethods(b_exp = b_Y[ind_Y_new],
b_out = b_X[ind_Y_new],
se_exp = se_Y[ind_Y_new],
se_out = se_X[ind_Y_new],
n_exp = n_Y,n_out = n_X)
View(CDMethods)
View(CD_Ratio_Independent_New)
use_r("CDMethods")
View(CDMethods)
use_r("CD_Ratio_Independent_New")
View(CD_Ratio_Independent_New)
use_mit_license()
document()
document()
?BiDirCDcML
use_package("MRCD")
use_package("MRcML")
use_mit_license()
use_mit_license("Haoran Xue, Wei Pan")
build_manual()
rm(list=ls())
library(TwoSampleMR)
library(MRcML)
library(MRCD)
TSMR.ID.Vec =
c("ebi-a-GCST002216","ebi-a-GCST002222","ebi-a-GCST002223",
"ieu-a-89","ieu-a-835","ieu-a-999","ieu-a-1083","ieu-b-39",
"ieu-b-38","ebi-a-GCST000568","ieu-b-25","ieu-b-73","ebi-a-GCST005195",
"ebi-a-GCST005838","ieu-a-26","ebi-a-GCST006862")
exp.index = 16
TSMR.ID.Vec =
c("ebi-a-GCST002216","ebi-a-GCST002222","ebi-a-GCST002223",
"ieu-a-89","ieu-a-835","ieu-a-999","ieu-a-1083","ieu-b-39",
"ieu-b-38","ebi-a-GCST000568","ieu-b-25","ieu-b-73","ebi-a-GCST005195",
"ebi-a-GCST005838","ieu-a-26","ebi-a-GCST006862")
exp.index = 10
out.index = 15
exp_id = TSMR.ID.Vec[exp.index]
out_id = TSMR.ID.Vec[out.index]
# preprocess data ---------------------------------------------------------
set.seed(1)
exposure_dat <- extract_instruments(exp_id,clump = F)
outcome_dat <- extract_instruments(out_id,clump = F)
union.IV = union(exposure_dat$SNP,outcome_dat$SNP)
exposure_dat <- extract_outcome_data(union.IV, exp_id, proxies = 0)
exposure_dat = exposure_dat[which(!duplicated(exposure_dat$SNP)),]
exposure_dat = exposure_dat[order(exposure_dat$chr,exposure_dat$pos),]
outcome_dat <- extract_outcome_data(union.IV, out_id, proxies = 0)
outcome_dat = outcome_dat[which(!duplicated(outcome_dat$SNP)),]
outcome_dat = outcome_dat[order(outcome_dat$chr,outcome_dat$pos),]
common.IV = intersect(exposure_dat$SNP,outcome_dat$SNP)
exposure_dat_new =
exposure_dat[which(is.element(exposure_dat$SNP,common.IV)),]
outcome_dat_new =
outcome_dat[which(is.element(outcome_dat$SNP,common.IV)),]
exp.out.flip =
allele.qc(a1 = exposure_dat_new$effect_allele.outcome,
a2 = exposure_dat_new$other_allele.outcome,
ref1 = outcome_dat_new$effect_allele.outcome,
ref2 = outcome_dat_new$other_allele.outcome)
if(sum(exp.out.flip$flip)>0)
{
outcome_dat_new$beta.outcome[exp.out.flip$flip] =
-outcome_dat_new$beta.outcome[exp.out.flip$flip]
}
exposure_dat_new = exposure_dat_new[exp.out.flip$keep,]
outcome_dat_new = outcome_dat_new[exp.out.flip$keep,]
### do the clumping
pval.clump = -log10(exposure_dat_new$pval.outcome) - log10(outcome_dat_new$pval.outcome)
pval.clump = 10^(-pval.clump)
data.clump =
data.frame(rsid = exposure_dat_new$SNP,
pval = pval.clump)
clump.result =
ieugwasr::ld_clump(dat = data.clump)
exposure_dat_final =
exposure_dat_new[which(is.element(exposure_dat_new$SNP,clump.result$rsid)),]
outcome_data_final =
outcome_dat_new[which(is.element(outcome_dat_new$SNP,clump.result$rsid)),]
b_exp = exposure_dat_final$beta.outcome
se_exp = exposure_dat_final$se.outcome
n_exp = mean(exposure_dat_final$samplesize.outcome)
b_out = outcome_data_final$beta.outcome
se_out = outcome_data_final$se.outcome
n_out = mean(outcome_data_final$samplesize.outcome)
install()
a = BiDirCDMethod(b_X = b_exp,b_Y = b_out,
se_X = se_exp,se_Y = se_out,
n_X = n_exp,n_Y = n_out,
sig.cutoff = 5e-8, random.seed = 1)
a
b = BiDirCDcML(b_X = b_exp,b_Y = b_out,se_X = se_exp,se_Y = se_out,
n_X = n_exp,n_Y = n_out,sig.cutoff = 5e-8, num_pert = 100,
random_start = 10, random.seed = 1
)
c = BiDirMRcML(b_X = b_exp,b_Y = b_out,se_X = se_exp,se_Y = se_out,
n_X = n_exp,n_Y = n_out,sig.cutoff = 5e-8, num_pert = 100,
random_start = 10, random.seed = 1
)
a
c
a
qnorm(1-0.05/48)
qnorm(1-0.001)
qnorm(1-0.05/48)
a
a[1]
a[2]
a[1,3,5,7,9,11,13,15]
a[c(1,3,5,7,9,11,13,15)]
seq(1,16,2)
seq(2,16,2)
a[seq(1,16,2)]
a[seq(1,16,2)] - qnorm(1-0.05/48/2)*
qnorm(1-0.05/48/2)
a[seq(1,16,2)] - qnorm(1-0.05/48/2)*a[seq(2,16,2)]
a[seq(1,16,2)]
as.numeric(a[seq(1,16,2)])
as.numeric(a[seq(1,16,2)]) - qnorm(1-0.05/48/2)*as.numeric(a[seq(2,16,2)])
as.numeric(a[seq(1,16,2)]) + qnorm(1-0.05/48/2)*as.numeric(a[seq(2,16,2)])
as.numeric(b[seq(1,16,2)]) + qnorm(1-0.05/48/2)*as.numeric(b[seq(2,16,2)])
as.numeric(b[seq(1,16,2)]) - qnorm(1-0.05/48/2)*as.numeric(b[seq(2,16,2)])
b[seq(1,16,2)]
as.numeric(b[seq(1,16,2)]) - qnorm(1-0.05/48/2)*as.numeric(b[seq(2,16,2)])
as.numeric(b[seq(1,16,2)]) + qnorm(1-0.05/48/2)*as.numeric(b[seq(2,16,2)])
